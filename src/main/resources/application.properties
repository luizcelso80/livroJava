security.basic.enable=false
#spring.datasource.url=jdbc:h2:mem:biblioteca;Mode=Mysql;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE


# DataSource settings: set here your own configurations for the database 
# connection. In this example we have "netgloo_blog" as database name and 
# "root" as username and password.
#spring.datasource.url = jdbc:mysql://localhost:3306/jpa_example
spring.datasource.url = jdbc:postgres://gnwweluqyiktye:654addf8d705909e2d4165aac6fef0685c53cf83de84167119faaddc9e399d9a@ec2-23-21-160-38.compute-1.amazonaws.com:5432/dbvmq5ikndodof
spring.datasource.username = gnwweluqyiktye
spring.datasource.password = 654addf8d705909e2d4165aac6fef0685c53cf83de84167119faaddc9e399d9a
#spring.datasource.username = root
#spring.datasource.password = 210880

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect